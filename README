1. Create a google sheet
2. Setup google Apps Script
 - Click on Extensions > App Script
 - Remove any code in the script and repalce with the code below:

var sheetName = 'Sheet1'; // Change this if your sheet is named differently
var scriptProp = PropertiesService.getScriptProperties();

function intialSetup() {
    var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    scriptProp.setProperty('key', activeSpreadsheet.getId());
}

function doPost(e) {
    var lock = LockService.getScriptLock();
    lock.tryLock(10000);
  
    try {
        var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
        var sheet = doc.getSheetByName(sheetName);
      
        var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        var nextRow = sheet.getLastRow() + 1;
      
        var newRow = headers.map(function(header) {
            return header === 'timestamp' ? new Date() : e.parameter[header];
        });
      
        sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow]);
      
        return ContentService
            .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
            .setMimeType(ContentService.MimeType.JSON);
    } catch (e) {
        return ContentService
            .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))
            .setMimeType(ContentService.MimeType.JSON);
    } finally {
        lock.releaseLock();
    }
}

  - Save the Script
  - Run the intialSetup function from the Apps Script editor. The first time you run it, you'll need to provide permissions to the script to manage your Google Sheets data.

3. Deploy as a Web App
   - In the Apps Script editor, click on Publish > Deploy as web app
   - For "Who has access to the app", select "Anyone"
   - Click Deploy
   - Copy the "web App URL" provided.

4. Create Your HTML Form
5. Test your form 
   - submit a test through your contact form to see if data appear in the google sheet

